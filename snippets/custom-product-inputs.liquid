{% assign dfg_metaobject = product.metafields.custom.info_expand.value %}
{% if dfg_metaobject %}
  {% assign meta_json = dfg_metaobject | json %}
  <script>
    window.productMetaData = {{ meta_json }};
  </script>
{% endif %}

<style>
  button { user-select:none }
  .option-buttons { display: flex; flex-wrap: wrap; gap: 5px; margin: 5px 0; }
  .option-button {
    padding: 6px 12px;
    border: 1px solid #333;
    background: #fff;
    cursor: pointer;
    font-size: 14px;
  }
  .option-button.selected {
    background: #000;
    color: #fff;
  }
  .custom-field { margin-bottom: 15px; }
  .note { font-size: 12px; color: #666; margin-bottom: 5px; }
  .image-input { margin-top: 5px; display:block; }
  .selected-value { margin-left: 8px; font-weight: normal; color: #000}
  .price-badge { 
    display: inline-block;
    margin-left: 5px;
    font-size: 11px;
    color: #666;
    font-weight: normal;
  }
  .image-preview {
    margin-top: 10px;
    max-width: 150px;
    max-height: 150px;
    border: 1px solid #ddd;
    padding: 5px;
    display: none;
  }
  .image-preview.show {
    display: block;
  }
</style>

<div id="custom-product-form"></div>

<script>
(function() {
  const metaData = window.productMetaData || [];
  
  // Mapping display names
  const displayNames = {
    'top': 'Top',
    'uniform': 'Uniform',
    'short_sleeve': 'Short Sleeve',
    'long_sleeve': 'Long Sleeve',
    'print': 'Print',
    'stitched': 'Stitched(Embroidered)',
    'blank': 'Blank(No Name/Number)',
    'lightweight': 'Lightweight',
    'quilted': 'Quilted',
    'left_sleeve': 'Left Sleeve',
    'right_sleeve': 'Right Sleeve',
    'left_chest': 'Left Chest',
    'right_chest': 'Right Chest',
    'back_neck': 'Back Neck',
    'shorts': 'Shorts'
  };

  // Tự động format key
  function formatKey(key) {
    return displayNames[key] || key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  }

  // Lấy tất cả options từ data object (bỏ qua các key là price)
  function getOptions(data) {
    return Object.keys(data).filter(key => {
      // Bỏ qua các key có chứa '_price'
      if (key.includes('_price')) return false;
      // Chỉ lấy option có giá trị true
      return data[key] === true;
    });
  }

  // Tự động tìm price cho một option
  function getPrice(data, optionKey) {
    const priceKey = optionKey + '_price';
    return data[priceKey] || null;
  }

  // Parse metadata theo index với auto-detect
  const styleData = metaData[0] || {};
  const sleeveData = metaData[1] || {};
  const logoData = metaData[2] || {};
  const menSizeData = metaData[3] || {};
  const womenSizeData = metaData[4] || {};
  const liningData = metaData[5] || {};
  const materialData = metaData[6] || {};
  const youthSizeData = metaData[7] || {};
  const textData = metaData[8] || {};

  // Render single/multi select field - HOÀN TOÀN TỰ ĐỘNG
  function renderField(label, groupName, data, isMultiSelect = false, allowImage = false) {
    const options = getOptions(data);
    if (options.length === 0) return '';

    let html = `<div class="custom-field">`;
    
    if (isMultiSelect) {
      html += `
        <p><strong>${label} (Optional)</strong></p>
        <p class="note">If the option isn't available, leave a note in order.</p>`;
    } else {
      html += `<p class="field-label" data-group="${groupName}"><strong>${label}: </strong><span class="selected-value"></span></p>`;
    }
    
    html += `<div class="option-buttons">`;

    // Render từng option với auto-detect price
    options.forEach(key => {
      const displayName = formatKey(key);
      const price = getPrice(data, key);
      const priceTag = price ? ` <span class="price-badge">(+$${price})</span>` : '';
      html += `<button type="button" class="option-button" data-group="${groupName}" data-value="${displayName}">${displayName}${priceTag}</button>`;
    });

    // Thêm "None" cho multi-select
    if (isMultiSelect) {
      html += `<button type="button" class="option-button" data-group="${groupName}" data-value="None">None</button>`;
    }

    html += `</div><input type="hidden" name="properties[${groupName}]">`;
    
    // Thêm file upload nếu cần
    if (allowImage) {
      html += `
        <input type="file" name="properties[${groupName} Image]" class="image-input" accept="image/*" data-preview="${groupName}-preview">
        <img class="image-preview" id="${groupName}-preview" alt="Preview">`;
    }
    
    html += `</div>`;
    return html;
  }

  // Render Gender field với dynamic sizes
  function renderGenderField() {
    const genderSizes = {
      "Men's": Object.keys(menSizeData).filter(k => menSizeData[k] === true).map(k => k.replace('size_', '').toUpperCase()),
      "Women's": Object.keys(womenSizeData).filter(k => womenSizeData[k] === true).map(k => k.replace('size_', '').toUpperCase()),
      "Youth's": Object.keys(youthSizeData).filter(k => youthSizeData[k] === true).map(k => k.replace('size_', '').toUpperCase())
    };

    let html = `
      <div class="custom-field">
        <p class="field-label" data-group="Gender"><strong>Gender: </strong><span class="selected-value"></span></p>
        <div class="option-buttons">`;

    Object.keys(genderSizes).forEach(gender => {
      if (genderSizes[gender].length > 0) {
        html += `<button type="button" class="option-button" data-group="Gender" data-value="${gender}" data-sizes="${genderSizes[gender].join(',')}">${gender}</button>`;
      }
    });

    html += `
        </div>
        <input type="hidden" name="properties[Gender]">
        <div class="size-options" style="margin-top:10px;">
          <label for="gender_size"><strong>Size</strong></label><br>
          <select id="gender_size" name="properties[Gender Size]" style="padding:5px; border:1px solid #333;">
            <option value="">-- Select Size --</option>
          </select>
        </div>
      </div>`;

    return html;
  }

  // Build form - Tự động render tất cả fields
  let formHTML = '';
  
  // Single-select fields
  if (getOptions(styleData).length > 0) {
    formHTML += renderField('Style', 'Style', styleData, false);
  }
  
  if (getOptions(sleeveData).length > 0) {
    formHTML += renderField('Sleeve', 'Sleeve', sleeveData, false);
  }

  // Gender với sizes
  formHTML += renderGenderField();

  if (getOptions(materialData).length > 0) {
    formHTML += renderField('Material', 'Material', materialData, false);
  }

  if (getOptions(liningData).length > 0) {
    formHTML += renderField('Inside Lining', 'Inside Lining', liningData, false);
  }

  // Multi-select fields với image upload
  if (getOptions(logoData).length > 0) {
    formHTML += renderField('1ST Logo Location', 'Logo Opt1', logoData, true, true);
    formHTML += renderField('2ND Logo Location', 'Logo Opt2', logoData, true, true);
  }

  document.getElementById('custom-product-form').innerHTML = formHTML;

  // Event handlers
  document.addEventListener("click", function(e) {
    if (e.target.classList.contains("option-button")) {
      const group = e.target.getAttribute("data-group");
      const value = e.target.getAttribute("data-value");

      // Multi-select cho Logo options
      if (group.includes("Logo Opt")) {
        if (value === "None") {
          document.querySelectorAll('.option-button[data-group="'+group+'"]').forEach(btn=>{
            btn.classList.remove("selected");
          });
          e.target.classList.add("selected");
          document.querySelector('input[name="properties['+group+']"]').value = "None";
        } else {
          e.target.classList.toggle("selected");
          
          let selectedVals = [];
          document.querySelectorAll('.option-button[data-group="'+group+'"].selected').forEach(btn=>{
            if (btn.getAttribute("data-value") !== "None") {
              selectedVals.push(btn.getAttribute("data-value"));
            }
          });
          document.querySelector('input[name="properties['+group+']"]').value = selectedVals.join(", ");
          
          // Remove "None" nếu có option khác được chọn
          if (selectedVals.length > 0) {
            document.querySelectorAll('.option-button[data-group="'+group+'"]').forEach(btn=>{
              if (btn.getAttribute("data-value") === "None") btn.classList.remove("selected");
            });
          }
        }
      } else {
        // Single select
        document.querySelectorAll('.option-button[data-group="'+group+'"]').forEach(btn=>{
          btn.classList.remove("selected");
        });
        e.target.classList.add("selected");

        const hidden = document.querySelector('input[name="properties['+group+']"]');
        if (hidden) hidden.value = value;

        const label = document.querySelector('.field-label[data-group="'+group+'"] .selected-value');
        if (label) label.textContent = value;

        // Load sizes khi chọn Gender
        if (group === "Gender") {
          const sizeDropdown = document.getElementById("gender_size");
          sizeDropdown.innerHTML = '<option value="">-- Select Size --</option>';
          const sizes = e.target.getAttribute("data-sizes").split(",");
          sizes.forEach(size=>{
            let opt = document.createElement("option");
            opt.value = size.trim();
            opt.textContent = size.trim();
            sizeDropdown.appendChild(opt);
          });
        }
      }
    }
  });

  // Event handler cho image upload
  document.addEventListener("change", function(e) {
    if (e.target.classList.contains("image-input")) {
      const previewId = e.target.getAttribute("data-preview");
      const previewImg = document.getElementById(previewId);
      
      if (e.target.files && e.target.files[0]) {
        const reader = new FileReader();
        
        reader.onload = function(event) {
          previewImg.src = event.target.result;
          previewImg.classList.add("show");
        };
        
        reader.readAsDataURL(e.target.files[0]);
      } else {
        // Nếu không có file, ẩn preview
        previewImg.classList.remove("show");
        previewImg.src = "";
      }
    }
  });
})();
</script>